Project: Simple React Product Listing UI

This React project is a basic example of building a product listing interface using reusable components and modular CSS styling. It involves three main files: App.jsx, App.css, and ProductCard.jsx. The application displays a list of products with their name, price, and availability status.

===============================
1. File: App.jsx
===============================
- This is the main React component of the project.
- It imports necessary dependencies: React and a CSS file (App.css).
- It defines a static array of product objects with the following fields:
  - name: Product name (e.g., "Wireless Mouse")
  - price: Product price (e.g., 25.99)
  - status: Availability status (e.g., "In Stock", "Out of Stock")
- It renders a list of product cards using the `map()` function.
- Each product is displayed inside a styled div with className "card".
- This file currently does not use the separate ProductCard component, but handles rendering inline.

===============================
2. File: App.css
===============================
- This file contains styling for the layout and components.
- Global styles:
  - Sets font to Arial, background color to white, and text color to black.
- .container:
  - Centers the content, adds padding, border, and width.
- .products:
  - Uses Flexbox to align product cards horizontally with gaps.
- .card:
  - Adds border, padding, shadows, and rounded corners to each product block.
- The design is clean, minimalistic, and responsive for small product lists.

===============================
3. File: ProductCard.jsx
===============================
- A reusable functional React component that accepts props:
  - name
  - price
  - status
- It renders product details inside a div with id="Product-Card".
- This component is not currently used in App.jsx, but is ready for use.
- Encourages component-based architecture and modular code.

===============================
Key Learnings from the Project:
===============================
1. **React Basics**:
   - Learned how to create functional components.
   - Used props and JSX to dynamically render content.

2. **Component Reusability**:
   - Understood the benefits of splitting UI into reusable components like ProductCard.

3. **State-less Static Data Rendering**:
   - Practiced rendering static data using the `map()` function in JSX.

4. **CSS Styling in React**:
   - Learned how to apply external CSS styling using className.
   - Used Flexbox for layout alignment.

5. **Clean Code Practices**:
   - Maintained separation of concerns by using separate files for logic (JSX) and style (CSS).
   - Learned about readable and modular code structure.

===============================
Suggestions for Improvement:
===============================
- Replace inline JSX in App.jsx with the ProductCard component for better modularity.
- Add dynamic functionality like filtering products by availability.
- Use PropTypes or TypeScript for type safety in components.
- Introduce React state and hooks for more advanced behavior (e.g., updating product data).

===============================
Conclusion:
===============================
This project provided hands-on experience with building a simple React UI, understanding JSX rendering, CSS layout techniques, and component-based architecture. It lays the foundation for more complex applications in the future.
